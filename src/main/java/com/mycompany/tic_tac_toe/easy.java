/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tic_tac_toe;

import java.awt.AWTEvent;
import java.awt.Color;
import static java.awt.Color.black;
import static java.awt.Color.gray;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.BoxLayout;
import static javax.swing.GroupLayout.Alignment.CENTER;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Popup;
import javax.swing.PopupFactory;

/**
 *
 * @author GoldenTech
 */

public class easy extends javax.swing.JFrame implements ActionListener{
    boolean computer = false;
    /**
     * Creates new form multiplayerFrame
     */
     // popup
    Popup p;
   
     PopupFactory pf = new PopupFactory();
     
        // create a panel
       
       // JPanel p1 = new JPanel();
         JPanel p2 = new JPanel();
         JLabel thewinner = new JLabel("player 1(O) is the winner!");
    private AWTEvent MouseClicked;
    public easy() {
        initComponents();
        // create a frame
       
 
        // create a label
        
 
       // f.setSize(400, 400);
 
       
 
       
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        playingHeader1 = new javax.swing.JPanel();
        playingtitle1 = new javax.swing.JLabel();
        playerTurn1 = new javax.swing.JLabel();
        backFromMulti1 = new javax.swing.JPanel();
        backFromMultiLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        restart = new javax.swing.JLabel();
        playingPanel1 = new javax.swing.JPanel();
        Panel1 = new javax.swing.JPanel();
        label00 = new javax.swing.JLabel();
        panel2 = new javax.swing.JPanel();
        label01 = new javax.swing.JLabel();
        panel3 = new javax.swing.JPanel();
        label02 = new javax.swing.JLabel();
        panel13 = new javax.swing.JPanel();
        label10 = new javax.swing.JLabel();
        panel14 = new javax.swing.JPanel();
        label11 = new javax.swing.JLabel();
        panel15 = new javax.swing.JPanel();
        label12 = new javax.swing.JLabel();
        panel23 = new javax.swing.JPanel();
        label20 = new javax.swing.JLabel();
        panel24 = new javax.swing.JPanel();
        label21 = new javax.swing.JLabel();
        panel25 = new javax.swing.JPanel();
        label22 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        playingHeader1.setBackground(new java.awt.Color(0, 0, 0));

        playingtitle1.setFont(new java.awt.Font("Ravie", 0, 18)); // NOI18N
        playingtitle1.setForeground(new java.awt.Color(0, 0, 255));
        playingtitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playingtitle1.setText("Multiplayer");

        playerTurn1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        playerTurn1.setForeground(new java.awt.Color(51, 204, 0));
        playerTurn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerTurn1.setText("Easy difficulty");

        backFromMulti1.setBackground(new java.awt.Color(0, 0, 0));
        backFromMulti1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backFromMulti1MouseEntered(evt);
            }
        });

        backFromMultiLabel1.setFont(new java.awt.Font("Harlow Solid Italic", 0, 36)); // NOI18N
        backFromMultiLabel1.setForeground(new java.awt.Color(0, 0, 255));
        backFromMultiLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backFromMultiLabel1.setText("<");
        backFromMultiLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        backFromMultiLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backFromMultiLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backFromMultiLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backFromMultiLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backFromMultiLabel1MouseExited(evt);
            }
        });

        javax.swing.GroupLayout backFromMulti1Layout = new javax.swing.GroupLayout(backFromMulti1);
        backFromMulti1.setLayout(backFromMulti1Layout);
        backFromMulti1Layout.setHorizontalGroup(
            backFromMulti1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backFromMultiLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
        );
        backFromMulti1Layout.setVerticalGroup(
            backFromMulti1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backFromMultiLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout playingHeader1Layout = new javax.swing.GroupLayout(playingHeader1);
        playingHeader1.setLayout(playingHeader1Layout);
        playingHeader1Layout.setHorizontalGroup(
            playingHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playingHeader1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backFromMulti1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playingtitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addGap(67, 67, 67))
            .addComponent(playerTurn1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        playingHeader1Layout.setVerticalGroup(
            playingHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playingHeader1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playingHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backFromMulti1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playingtitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(19, 19, 19)
                .addComponent(playerTurn1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(playingHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(playingHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));

        restart.setFont(new java.awt.Font("Ravie", 0, 18)); // NOI18N
        restart.setForeground(new java.awt.Color(0, 0, 255));
        restart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        restart.setText("Restart");
        restart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        restart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restartMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(restart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        playingPanel1.setBackground(new java.awt.Color(51, 51, 255));
        playingPanel1.setLayout(new java.awt.GridLayout(3, 3, 5, 5));

        Panel1.setBackground(new java.awt.Color(255, 255, 255));

        label00.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label00.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label00.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label00MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label00, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label00, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(Panel1);

        panel2.setBackground(new java.awt.Color(255, 255, 255));

        label01.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label01.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label01.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label01MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label01, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label01, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel2);

        panel3.setBackground(new java.awt.Color(255, 255, 255));

        label02.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label02.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label02.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label02MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label02, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label02, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel3);

        panel13.setBackground(new java.awt.Color(255, 255, 255));

        label10.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel13Layout = new javax.swing.GroupLayout(panel13);
        panel13.setLayout(panel13Layout);
        panel13Layout.setHorizontalGroup(
            panel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label10, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel13Layout.setVerticalGroup(
            panel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label10, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel13);

        panel14.setBackground(new java.awt.Color(255, 255, 255));

        label11.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label11MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel14Layout = new javax.swing.GroupLayout(panel14);
        panel14.setLayout(panel14Layout);
        panel14Layout.setHorizontalGroup(
            panel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label11, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel14Layout.setVerticalGroup(
            panel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label11, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel14);

        panel15.setBackground(new java.awt.Color(255, 255, 255));

        label12.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel15Layout = new javax.swing.GroupLayout(panel15);
        panel15.setLayout(panel15Layout);
        panel15Layout.setHorizontalGroup(
            panel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label12, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel15Layout.setVerticalGroup(
            panel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label12, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel15);

        panel23.setBackground(new java.awt.Color(255, 255, 255));

        label20.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label20MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel23Layout = new javax.swing.GroupLayout(panel23);
        panel23.setLayout(panel23Layout);
        panel23Layout.setHorizontalGroup(
            panel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label20, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel23Layout.setVerticalGroup(
            panel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label20, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel23);

        panel24.setBackground(new java.awt.Color(255, 255, 255));

        label21.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label21.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label21MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel24Layout = new javax.swing.GroupLayout(panel24);
        panel24.setLayout(panel24Layout);
        panel24Layout.setHorizontalGroup(
            panel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label21, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel24Layout.setVerticalGroup(
            panel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label21, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel24);

        panel25.setBackground(new java.awt.Color(255, 255, 255));

        label22.setFont(new java.awt.Font("Chiller", 0, 80)); // NOI18N
        label22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label22.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label22MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel25Layout = new javax.swing.GroupLayout(panel25);
        panel25.setLayout(panel25Layout);
        panel25Layout.setHorizontalGroup(
            panel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label22, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
        panel25Layout.setVerticalGroup(
            panel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label22, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        playingPanel1.add(panel25);

        jPanel5.add(playingPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    boolean winner = false;
    boolean drawb = false;
    int[][] matrix = new int[3][3];
    int player = 1;
    public boolean checkWinner(int[][] matrix){
       if(!winner && !drawb){
        ///////////////
         GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
         GraphicsDevice defaultScreen = ge.getDefaultScreenDevice();
    Rectangle rect = defaultScreen.getDefaultConfiguration().getBounds();
     int X = (int)((int) rect.getMaxX() - p2.getWidth() * 1.2) / 2;
    int y = (int)((int) rect.getMaxY() - (p2.getHeight())) / 2;
        p2.setSize(400, 100);
      //  p1.setSize(400, 100);
        Font fo = new Font("Chiller", 10, 59);
        thewinner.setFont(fo);
        p2.setBackground(Color.white);
        //p1.setLayout(new GridBagLayout());
        
        p2.add(thewinner);
        
        
        p = pf.getPopup(this, p2, 0, 0);
     
       // this.add(p1);
       // f.show();
        //////////////////////
       
        int x = 0;
        int o = 0;
        for(int i = 0 ; i < 3 ; i++){
            x = 0;
            o = 0;
             
            for(int j = 0 ; j < 3 ; j++){
                if(matrix[i][j] == 1){
                    o++;
                }
                if(matrix[i][j] == 2){
                    x++;
                }
            }
            if(x == 3){
                winner = true;
                thewinner.setText("player 2(X) is the winner!");
                 p = pf.getPopup(this, p2, X, y);
                 p.show();
                 
                 return winner;
                //x winner
            }else if(o == 3){
                 winner = true;
                 thewinner.setText("player 1(O) is the winner!");
                 p = pf.getPopup(this, p2, X, y);
                  p.show();
                return winner;
                //o winner
            }
        }
        ///////////
         for(int i = 0 ; i < 3 ; i++){
             x = 0;
             o = 0;
            for(int j = 0 ; j < 3 ; j++){
                if(matrix[j][i] == 1){
                    o++;
                }
                if(matrix[j][i] == 2){
                    x++;
                }
            }
            if(x == 3){
                //x winner
                 winner = true;
                thewinner.setText("player 2(X) is the winner!");
                 p = pf.getPopup(this, p2, X, y);
                 p.show();
                 return winner;
            }else if(o == 3){
                 winner = true;
                thewinner.setText("player 1(O) is the winner!");
                 p = pf.getPopup(this, p2, X, y);
                 p.show();
                 return winner;
                //o winner
            }
        }
         if(matrix[0][0] == 1 && matrix[1][1] == 1 && matrix[2][2] == 1){
              winner = true;
             thewinner.setText("player 1(O) is the winner!");
              p = pf.getPopup(this, p2, X, y);
              p.show();
              return winner;
             //o winner
         }else if(matrix[0][0] == 2 && matrix[1][1] == 2 && matrix[2][2] == 2){
              winner = true;
             thewinner.setText("player 2(X) is the winner!");
              p = pf.getPopup(this, p2, X, y);
              p.show();
            return winner;
             //x winner
         }
         if(matrix[0][2] == 1 && matrix[1][1] == 1 && matrix[2][0] == 1){
              winner = true;
             thewinner.setText("player 1(O) is the winner!");
              p = pf.getPopup(this, p2, X, y);
              p.show();
            return winner;
             //o winner
         }else if(matrix[0][2] == 2 && matrix[1][1] == 2 && matrix[2][0] == 2){
              winner = true;
             //x winner
            thewinner.setText("player 2(X) is the winner!");
             p = pf.getPopup(this, p2, X, y);
             p.show();
           return winner;
         }
         int draw = 0;
         for(int i = 0 ; i < 3 ; i++){
             for(int j = 0 ; j < 3 ; j++){
                 if(matrix[i][j] == 0){
                     break;
                 }else{
                     draw++;
                 }
             }
         }
         if(draw == 9 && !winner){
             X =(int) ((int) rect.getMaxX() - (p2.getWidth() / 1.4)) / 2;
             thewinner.setText("ITS A DRAW!...");
             p = pf.getPopup(this, p2, X, y);
             drawb = true;
              p.show();
            return drawb;
         }
         
       }
       return false;
    }
    int row = 0;
    int col = 0;
    //////////////////////////////////////////////////////////////
    
    public boolean checkGame(int[][] matrix){
        ///////////////
         
       
        int x = 0;
        int o = 0;
        for(int i = 0 ; i < 3 ; i++){
            x = 0;
            o = 0;
             
            for(int j = 0 ; j < 3 ; j++){
                if(matrix[i][j] == 1){
                    o++;
                }
                if(matrix[i][j] == 2){
                    x++;
                }
            }
            if(x == 3){
                
                 
                 return true;
                //x winner
            }else if(o == 3){
                 
                return true;
                //o winner
            }
        }
        ///////////
         for(int i = 0 ; i < 3 ; i++){
             x = 0;
             o = 0;
            for(int j = 0 ; j < 3 ; j++){
                if(matrix[j][i] == 1){
                    o++;
                }
                if(matrix[j][i] == 2){
                    x++;
                }
            }
            if(x == 3){
                //x winner
                 
              
                 return true;
            }else if(o == 3){
                
                 return true;
                //o winner
            }
        }
         if(matrix[0][0] == 1 && matrix[1][1] == 1 && matrix[2][2] == 1){
             
            
              return true;
             //o winner
         }else if(matrix[0][0] == 2 && matrix[1][1] == 2 && matrix[2][2] == 2){
            
            return true;
             //x winner
         }
         if(matrix[0][2] == 1 && matrix[1][1] == 1 && matrix[2][0] == 1){
              
            return true;
             //o winner
         }else if(matrix[0][2] == 2 && matrix[1][1] == 2 && matrix[2][0] == 2){
              
           return true;
         }
         int draw = 0;
         for(int i = 0 ; i < 3 ; i++){
             for(int j = 0 ; j < 3 ; j++){
                 if(matrix[i][j] == 0){
                     break;
                 }else{
                     draw++;
                 }
             }
         }
         if(draw == 9 && !winner){
            
            
            return true;
         }
         return false;
    }
    
    
    
    
    /////////////////////////////////////////////////////////////
    
    boolean togle;
    public int[] alphaBeta(int[][] matrix) {
        int[] bestMove = new int[2];
       //inializing the alpha beta and the score values;////////////////////////
        int bestScore = Integer.MIN_VALUE;
        int alpha = Integer.MIN_VALUE;
        int beta = Integer.MAX_VALUE;
//////////max move setting alpha value///////////////////////////////////////////////////////////////////
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][j] = 1;
                    int score = minValue(matrix, alpha, beta);
                     System.out.println(score + "min score 1");
                    matrix[i][j] = 0;

                    if (score > bestScore) {
                        bestScore = score;
                        bestMove[0] = i;
                        bestMove[1] = j;
                    }
                   // if(togle){
                    //    alpha = Math.max(alpha, bestScore);
                   //     togle = !togle;
                  //  }else{
                  //      alpha = Math.min(alpha, bestScore);
                         togle = !togle;
                  //  }
                    
                    System.out.println(alpha + "alpha max");
               ////////////pruning///////////////////////
                    if (alpha >= beta) {
                        break;
                    }
                }
            }
        }

        return bestMove;
    }
///////////////finding maxvalue (best move for ai)//////////////////////////
    private int maxValue(int[][] matrix, int alpha, int beta) {
        if (checkGame(matrix)) {
            return evaluate(matrix);
        }

        int maxScore = Integer.MIN_VALUE;

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][j] = 1;
                    int score = minValue(matrix, alpha, beta);
                     System.out.println(score + "min score2");
                    matrix[i][j] = 0;
                 //   if(togle){
                    maxScore = Math.max(maxScore, score);
                 //   togle = !togle;
                  //  }else{
                         maxScore = Math.min(maxScore, score);
                    //     togle = !togle;
                  //  }
                    
                    alpha = Math.max(alpha, maxScore);
                    if (alpha >= beta) {
                        return maxScore;
                    }
                }
            }
        }

        return maxScore;
    }
////////////////////////min vlaue (worst move ffor human)///////////////////////////
    private int minValue(int[][] matrix, int alpha, int beta) {
        if (checkGame(matrix)) {
            return evaluate(matrix);
        }

        int minScore = Integer.MAX_VALUE;

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][j] = 2;
                    int score = maxValue(matrix, alpha, beta);
                     System.out.println(score + "max score2");
                    matrix[i][j] = 0;

                    minScore = Math.min(minScore, score);
                    if(togle){
                        beta = Math.min(beta, minScore);
                        togle = !togle;
                    }else{
                        beta = Math.max(beta, minScore);
                        togle = !togle;
                    }
                    
                     System.out.println(beta + "min beta");
                    if (alpha >= beta) {
                        return minScore;
                    }
                }
            }
        }

        return minScore;
    }
/////////see whihch is better for the score///////////////////////////////////////////////////////////////
    private int evaluate(int[][] matrix) {
       
    int x = 0;
        int o = 0;
        for(int i = 0 ; i < 3 ; i++){
            x = 0;
            o = 0;
             
            for(int j = 0 ; j < 3 ; j++){
                if(matrix[i][j] == 1){
                    o++;
                }
                if(matrix[i][j] == 2){
                    x++;
                }
            }
            if(x == 3){
                
                 
                 return -10;
                //x winner
            }else if(o == 3){
                 
                return 10;
                //o winner
            }
        }
        ///////////
         for(int i = 0 ; i < 3 ; i++){
             x = 0;
             o = 0;
            for(int j = 0 ; j < 3 ; j++){
                if(matrix[j][i] == 1){
                    o++;
                }
                if(matrix[j][i] == 2){
                    x++;
                }
            }
            if(x == 3){
                //x winner
                 
              
                return -10;
            }else if(o == 3){
                
                 return 10;
                //o winner
            }
        }
         if(matrix[0][0] == 1 && matrix[1][1] == 1 && matrix[2][2] == 1){
             
            
             return 10;
             //o winner
         }else if(matrix[0][0] == 2 && matrix[1][1] == 2 && matrix[2][2] == 2){
            
            return -10;
             //x winner
         }
         if(matrix[0][2] == 1 && matrix[1][1] == 1 && matrix[2][0] == 1){
              
           return 10;
             //o winner
         }else if(matrix[0][2] == 2 && matrix[1][1] == 2 && matrix[2][0] == 2){
              
          return -10;
         }
         int draw = 0;
         for(int i = 0 ; i < 3 ; i++){
             for(int j = 0 ; j < 3 ; j++){
                 if(matrix[i][j] == 0){
                     break;
                 }else{
                     draw++;
                 }
             }
         }
         if(draw == 9 && !winner){
            
            
            return 0;
         }
         return 0;
}

   
    

int[][] matrix1 = new int[3][3];
    
    
    ////////////////////////////////////////////////////////////////
     public void AIplay(int[][] matrix){
         if(!winner){
         System.out.println("-------------------------");
         int[] bestmove = new int[2];
         matrix1 = matrix.clone();
         
        bestmove = alphaBeta(matrix1);
        
        if(bestmove[0] == 0 && bestmove[1] == 0){
            label00.setText("O");
        }else if(bestmove[0] == 0 && bestmove[1] == 1){
            label01.setText("O");
        }else if(bestmove[0] == 0 && bestmove[1] == 2){
            label02.setText("O");
        }else if(bestmove[0] == 1 && bestmove[1] == 0){
            label10.setText("O");
        }else if(bestmove[0] == 1 && bestmove[1] == 1){
            label11.setText("O");
        }else if(bestmove[0] == 1 && bestmove[1] == 2){
            label12.setText("O");
        }else if(bestmove[0] == 2 && bestmove[1] == 0){
            label20.setText("O");
        }else if(bestmove[0] == 2 && bestmove[1] == 1){
            label21.setText("O");
        }else if(bestmove[0] == 2 && bestmove[1] == 2){
            label22.setText("O");
        }
        matrix[bestmove[0]][bestmove[1]] = 1;
        matrix1 = matrix.clone();
        computer = false;
        checkWinner(matrix);
         }
        
     }
    
    
    
    private void backFromMultiLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromMultiLabel1MouseClicked
        singleDB f = new singleDB();
       //System.out.println(matrix[0][0]);
        this.setVisible(false);
        f.setVisible(true);
        f.setLocationRelativeTo(null);
    }//GEN-LAST:event_backFromMultiLabel1MouseClicked
    
    
    private void restartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartMouseClicked
        label00.setText("");
        label01.setText("");
        label02.setText("");
        label10.setText("");
        label11.setText("");
        label12.setText("");
        label20.setText("");
        label21.setText("");
        label22.setText("");
        player = 1;
//        playerTurn1.setText("Player's 1(O) turn");
        for(int i = 0 ; i < 3 ; i++){
            for(int j = 0 ; j < 3 ; j++){
                matrix[i][j] = 0;
            }
        }
        winner = false;
        drawb = false;
        computer = false;
      p.hide();
           
    }//GEN-LAST:event_restartMouseClicked

    private void label00MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label00MouseClicked
       if(label00.getText() != "X" && label00.getText() != "O" && !winner && !drawb && !computer){
        
          matrix[0][0] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label00.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
          ///////////////////////////////////////////////////////////

       }
       
      
       
    }//GEN-LAST:event_label00MouseClicked

    private void label01MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label01MouseClicked
      if(label01.getText() != "X" && label01.getText() != "O" && !winner && !drawb && !computer){
        
          matrix[0][1] = 2; 
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label01.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
 
      }
    }//GEN-LAST:event_label01MouseClicked

    private void label02MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label02MouseClicked
       if(label02.getText() != "X" && label02.getText() != "O" && !winner && !drawb && !computer){  
          
          matrix[0][2] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label02.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
    //////////////////////////////
       
       }
    }//GEN-LAST:event_label02MouseClicked

    private void label10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label10MouseClicked
        if(label10.getText() != "X" && label10.getText() != "O" && !winner && !drawb && !computer){ 
        
          matrix[1][0] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label10.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
           
        }
    }//GEN-LAST:event_label10MouseClicked

    private void label11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label11MouseClicked
       if(label11.getText() != "X" && label11.getText() != "O" && !winner && !drawb && !computer){  
       
          matrix[1][1] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label11.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
                 }
    }//GEN-LAST:event_label11MouseClicked

    private void label12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label12MouseClicked
     if(label12.getText() != "X" && label12.getText() != "O" && !winner && !drawb && !computer){     
        
          matrix[1][2] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label12.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
       
        
     }
    }//GEN-LAST:event_label12MouseClicked

    private void label20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label20MouseClicked
      if(label20.getText() != "X" && label20.getText() != "O" && !winner && !drawb && !computer){    
       
          matrix[2][0] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label20.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix);
         
          
      }
    }//GEN-LAST:event_label20MouseClicked

    private void label21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label21MouseClicked
      if(label21.getText() != "X" && label21.getText() != "O" && !winner && !drawb && !computer){ 
        
          matrix[2][1] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label21.setText("X");
          computer = true;
          checkWinner(matrix);
          AIplay(matrix); 
          
      }
    }//GEN-LAST:event_label21MouseClicked

    private void label22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label22MouseClicked
      if(label22.getText() != "X" && label22.getText() != "O" && !winner && !drawb && !computer){   
        
          matrix[2][2] = 2; 
          player = 2;
//          playerTurn1.setText("Players 2(X) turn(computer turn)");
          label22.setText("X");
          computer = true;
          checkWinner(matrix); 
          AIplay(matrix);
          
      }
    }//GEN-LAST:event_label22MouseClicked

    private void backFromMulti1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromMulti1MouseEntered
         
    }//GEN-LAST:event_backFromMulti1MouseEntered

    private void backFromMultiLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromMultiLabel1MouseEntered
        backFromMulti1.setBackground(gray);
    }//GEN-LAST:event_backFromMultiLabel1MouseEntered

    private void backFromMultiLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromMultiLabel1MouseExited
        backFromMulti1.setBackground(black);
    }//GEN-LAST:event_backFromMultiLabel1MouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(easy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(easy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(easy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(easy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
               easy f = new easy();
               f.setVisible(true);
               f.setLocationRelativeTo(null);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel backFromMulti1;
    private javax.swing.JLabel backFromMultiLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel label00;
    private javax.swing.JLabel label01;
    private javax.swing.JLabel label02;
    private javax.swing.JLabel label10;
    private javax.swing.JLabel label11;
    private javax.swing.JLabel label12;
    private javax.swing.JLabel label20;
    private javax.swing.JLabel label21;
    private javax.swing.JLabel label22;
    private javax.swing.JPanel panel13;
    private javax.swing.JPanel panel14;
    private javax.swing.JPanel panel15;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel23;
    private javax.swing.JPanel panel24;
    private javax.swing.JPanel panel25;
    private javax.swing.JPanel panel3;
    private javax.swing.JLabel playerTurn1;
    private javax.swing.JPanel playingHeader1;
    private javax.swing.JPanel playingPanel1;
    private javax.swing.JLabel playingtitle1;
    private javax.swing.JLabel restart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
         label00.setText("");
        label01.setText("");
        label02.setText("");
        label10.setText("");
        label11.setText("");
        label12.setText("");
        label20.setText("");
        label21.setText("");
        label22.setText("");
        player = 1;
//        playerTurn1.setText("Players 1(O) turn");
        for(int i = 0 ; i < 3 ; i++){
            for(int j = 0 ; j < 3 ; j++){
                matrix[i][j] = 0;
            }
        }
      p.hide();
     
    }
}
